.rule_4_1_4_ensure_bogon_filtering_is_set_where_ebgp_is_used

Reference: National Security Agency (NSA)
cymru.org/Services/Bogons/)
(http://www.iana.org/assignments/ipv4-address-space/)

Remediation: JUNOS offers a variety of options for filtering Bogons and Martians, which is why this item
is not scored. Some of the more common options are discussed below.
1 - The Martian Table Most Martian space (but not all, else you would not be able to use



your router on private networks) is blocked using the Martian Routing Table, which is
discussed elsewhere in this Benchmark and configured under the [edit routing-options
martians] hierarchy. Route updates for prefixes in this special table are ignored, so adding
Bogons here will prevent them being learned through any routing protocol.
2 - Ingress Prefix Filtering Ingress Filtering should be used on eBGP sessions to prevent
your own prefixes being advertised back to your network or, in the case of ISP networks,
customer networks advertising prefixes other than those allocated to them.
The other filtering types are covered previously. Prefix lists are configured under the [edit
policy-options] hierarchy, but are discussed here as they are applied under the [edit
protocols bgp <group name>] hierarchy. First configure a policy:
[edit policy-options]
user@host#edit policy-statement <policy name> term <term name>
[edit policy-options policy-statement <policy name> <term name>]
user@host#set from route-filter <network>/<mask> <exact | orlonger | prefix-
length-range <start>-<end>> reject
The last stage should be repeated for each prefix required, but as several options are
shown, a couple of examples are given below:
[edit policy-options <policy name> <term name>]
user@host#set from route-filter 0.0.0.0/0 exact reject
user@host#set from route-filter 10.0.0.0/8 orlonger reject
user@host#set from route-filter 0.0.0.0/0 prefix-length-range /29-/32 reject
The first line in the example rejects a default route advertised to the router and only that
route. The second line will filter any route from the 10.0.0.0/8 range, for instance
with a mask length of /29, /30, /31 or /32 (generally eBGP routes should be summarized
into larger prefixes than this). Having defined a policy, we need to apply it.
As with most other BGP configuration options, you can apply the policy at Global, Group or
Neighbor levels as suites your needs. In this example we will apply the policy to a group
containing all our eBGP peers:

[edit protocols bgp group <group name>]
user@host#set import <policy name/s>
3 - Peering with a Bogon Route Server As far as I am aware, the idea of using a BGP
Peering session to a Route Server for updates on Bogon networks was hatched by Team
Cymru and they offer a free, public Bogon Route Server, which you can peer with to keep
you Bogon list up to date. The theory works equally well by peering to a route server of
your own, allowing a greater degree of control over your Bogon list updates for your
organization if desired. First a static route is created and configured to discard traffic. An



address that is reserved for Test or Example networks is used, you may need to allow this
/32 prefix in the Martian Table:

[edit routing-options]
user@host#set static route 192.0.2.1/32 discard no-readvertise retain
An import policy should be set to match prefixes from the route servers AS and the
Community (if used) for Bogon updates, setting the next hop to 192.0.2.1 and accepting the
route.

[edit policy-options]
user@host#edit policy-statement <policy name> term <term name>
[edit policy-options policy-statement <policy name> term <term name>]
user@host#set from protocol bgp as-path <peer AS> community <community>
user@host#set then next-hop 192.0.2.1
Finally the BGP Peering and Group is configured with the import policy above and not to
export. In addition security options covered in other recommendations should be used:

[edit protocols bgp <group name>]
user@host#set type external description "bogon route servers"
user@host#set import <policy name>
user@host#set peer-as <AS of Route Server>
user@host#set neighbor <neighbors IP>
user@host#set local-address <local IP to use for peering>

.